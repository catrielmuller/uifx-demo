{"version":3,"sources":["logo.png","A.js","B.js","App.js","serviceWorker.js","index.js","audio-assets/beep.mp3","audio-assets/tick.mp3"],"names":["module","exports","__webpack_require__","p","beep","UIfx","bellAudio","App","state","count","_this2","this","react_default","a","createElement","style","padding","prism","language","okaidia","customStyle","onClick","play","setState","Component","tick","tickAudio","volume","throttleMs","value","onChange","event","_this","target","margin","min","max","step","type","src","require","width","paddingLeft","href","marginTop","A_App","B_App","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8MCMlCC,EAAO,IAAIC,IAAKC,KAGDC,6MACnBC,MAAQ,CACNC,MAAO,2EAEA,IAAAC,EAAAC,KAkBP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,KACrBJ,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAmBC,SAAS,MAAMH,MAAOI,IAASC,YAAa,CAACJ,QAAS,KAnBnE,iSAsBNJ,EAAAC,EAAAC,cAAA,sBAAcH,KAAKH,MAAMC,MAAzB,UACAG,EAAAC,EAAAC,cAAA,UACEO,QAAS,WACPjB,EAAKkB,OACLZ,EAAKa,SAAS,CACZd,MAAOC,EAAKF,MAAMC,MAAQ,MAJhC,kBA7ByBe,8BCD3BC,EAAO,IAAIpB,IACfqB,IACA,CACEC,OAAQ,GACRC,WAAY,KAIKrB,6MACnBC,MAAQ,CACNqB,MAAO,KAwDTC,SAAW,SAAAC,GACTC,EAAKT,SAAS,CAAEM,MAAOE,EAAME,OAAOJ,OAASJ,EAAKH,+EApBlD,OACEV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEmB,OAAQ,oBACpBtB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAmBC,SAAS,aAAaH,MAAOI,IAASC,YAAa,CAACJ,QAAS,KAnC1E,2rBAsCNJ,EAAAC,EAAAC,cAAA,WAAMH,KAAKH,MAAMqB,OACjBjB,EAAAC,EAAAC,cAAA,SACEe,MAAOlB,KAAKH,MAAMqB,MAClBC,SAAUnB,KAAKmB,SACfK,IAAI,IACJC,IAAI,MACJC,KAAK,IACLC,KAAK,kBApDkBd,aCRZjB,mLAKjB,OACEK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKyB,IAAKC,EAAQ,KAAezB,MAAO,CACtC0B,MAAO,GACPzB,QAAS,gBAGbJ,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAAE2B,YAAa,GAAIR,OAAQ,eACpCtB,EAAAC,EAAAC,cAAA,qBAEFF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAE2B,YAAa,KACzB9B,EAAAC,EAAAC,cAAA,KAAG6B,KAAK,mCAAR,oCAIF/B,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAE2B,YAAa,KACzB9B,EAAAC,EAAAC,cAAA,KAAG6B,KAAK,sCAAR,uCAIF/B,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAE6B,UAAW,GAAI5B,QAAS,KACpCJ,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAmBC,SAAS,QAAQH,MAAOI,IAASC,YAAa,CAACJ,QAAS,KAzBvE,4BA8BNJ,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,cAlCyBtB,aCIbuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInB9D,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.3c620807.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a6bc43e6.png\";","import React, { Component } from \"react\";\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport UIfx from \"uifx\";\nimport bellAudio from './audio-assets/beep.mp3'\n\nconst beep = new UIfx(bellAudio);\n\n\nexport default class App extends Component {\n  state = {\n    count: 0\n  }\n  render() {\n\n    const code = `import UIfx from './uifx'\nimport beepMp3 from './my-sounds/beep.mp3'\n\nconst beep = new UIfx(beepMp3)\n\n\n/**************\n * using uifx *\n **************/\n\n// Vanilla JS\n<button onclick=\"beep.play()\">Signup</button>\n\n// React.js\n<button onClick={beep.play}>Signup</button>`\n\n    return (\n      <div style={{ padding: 16 }}>\n        <h2>Basic</h2>\n        <SyntaxHighlighter language=\"jsx\" style={okaidia} customStyle={{padding: 20}}>\n          {code}\n        </SyntaxHighlighter>\n        <div>Pressed {this.state.count} times</div>\n        <button\n          onClick={() => {\n            beep.play();\n            this.setState({\n              count: this.state.count + 1\n            });\n          }}\n        >\n          Signup\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n\nimport UIfx from \"uifx\";\nimport tickAudio from './audio-assets/tick.mp3';\n\nconst tick = new UIfx(\n  tickAudio,\n  {\n    volume: 0.1,\n    throttleMs: 50\n  }\n);\n\nexport default class App extends Component {\n  state = {\n    value: 0\n  };\n\n  render() {\n\n    const code = `import UIfx from './uifx'\nimport tickMp3 from './my-sounds/beep.mp3'\n\nconst tick = new UIfx(\n  tickMp3,\n  {\n    volume: 0.9, // value must be between 0.0 â‡” 1.0\n    throttleMs: 50\n  }\n)\n\n// temporarily change volume\ntick.play(0.5)                   // plays 0.5 volume\ntick.play()                      // reverts back to 0.1 volume\n\n// permanently change volume\ntick.setVolume(0.2).play()       // plays 0.2 volume\ntick.play()                      // plays 0.2 volume\n\n\n\n/**************\n * using uifx *\n **************/\n\n// Example in vanilla JS\n<input onchange=\"tick.play()\" type=\"range\"/>\n\n// Example in ReactJS\n<input onChange={tick.play} type=\"range\"/>\n`\n\n    return (\n      <div style={{ margin: '16px 16px 100px' }}>\n        <h2>Advanced</h2>\n        <SyntaxHighlighter language=\"javascript\" style={okaidia} customStyle={{padding: 20}}>\n          {code}\n        </SyntaxHighlighter>\n        <div>{this.state.value}</div>\n        <input\n          value={this.state.value}\n          onChange={this.onChange}\n          min=\"0\"\n          max=\"100\"\n          step=\"5\"\n          type=\"range\"\n        />\n      </div>\n    );\n  }\n\n  onChange = event => {\n    this.setState({ value: event.target.value }, tick.play);\n  };\n}\n","import React, { Component } from \"react\";\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\n\nimport A from \"./A\";\nimport B from './B'\n\nexport default class App extends Component {\n  render() {\n\n    const code = `npm install --save uifx`\n    \n    return (\n      <div>\n        <div>\n          <img src={require('./logo.png')} style={{\n            width: 68,\n            padding: '1em 1em 0',\n          }}/>\n        </div>\n        <h1 style={{ paddingLeft: 16, margin: '10px 0px 0' }}>\n          <code>uifx</code>\n        </h1>\n        <div style={{ paddingLeft: 16 }}>\n          <a href=\"https://github.com/wle8300/uifx\">\n            https://github.com/wle8300/uifx\n          </a>\n        </div>\n        <div style={{ paddingLeft: 16 }}>\n          <a href=\"https://www.npmjs.com/package/uifx\">\n            https://www.npmjs.com/package/uifx\n          </a>\n        </div>\n        <div style={{ marginTop: 30, padding: 16 }}>\n          <h2>Installation</h2>\n          <SyntaxHighlighter language=\"shell\" style={okaidia} customStyle={{padding: 20}}>\n            {code}\n          </SyntaxHighlighter>\n        </div>\n        \n        <A />\n        <B />\n\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/beep.6df49e4b.mp3\";","module.exports = __webpack_public_path__ + \"static/media/tick.eb69c905.mp3\";"],"sourceRoot":""}